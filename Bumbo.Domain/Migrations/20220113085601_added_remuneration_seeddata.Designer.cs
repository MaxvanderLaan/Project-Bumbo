// <auto-generated />
using System;
using Bumbo.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bumbo.Domain.Migrations
{
    [DbContext(typeof(BumboContext))]
    [Migration("20220113085601_added_remuneration_seeddata")]
    partial class added_remuneration_seeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bumbo.Domain.Models.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Availability");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalStatus = 0,
                            EmployeeId = 3,
                            End = new DateTime(2022, 2, 9, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2022, 1, 9, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            ApprovalStatus = 2,
                            EmployeeId = 3,
                            End = new DateTime(2022, 2, 10, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2022, 1, 7, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = 1
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShelvesLength")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            City = "Deurne",
                            Country = "Nederland",
                            Email = "bumbodeurne@bumbo.site",
                            HouseNumber = "52B",
                            Name = "Bumbo Deurne",
                            PhoneNumber = "0689398732",
                            ShelvesLength = 10,
                            State = "Noord-Brabant",
                            StreetName = "Kerkstraat",
                            ZipCode = "6473HD"
                        },
                        new
                        {
                            BranchId = 2,
                            City = "Den Bosch",
                            Country = "Nederland",
                            Email = "bumbodenbosch@bumbo.site",
                            HouseNumber = "2A",
                            Name = "Bumbo Den Bosch",
                            PhoneNumber = "0689425732",
                            ShelvesLength = 20,
                            State = "Noord-Brabant",
                            StreetName = "BoulevardLaantje",
                            ZipCode = "6173HD"
                        },
                        new
                        {
                            BranchId = 3,
                            City = "Veghel",
                            Country = "Nederland",
                            Email = "bumboveghel@bumbo.nl",
                            HouseNumber = "104",
                            Name = "Bumbo Veghel",
                            PhoneNumber = "0683445732",
                            ShelvesLength = 150,
                            State = "Noord-Brabant",
                            StreetName = "Industrieterrein",
                            ZipCode = "9054BZ"
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int");

                    b.Property<int?>("MinimalHours")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Scale")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FunctionId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            ContractId = 1,
                            EmployeeId = 3,
                            FunctionId = 1,
                            MinimalHours = 4,
                            Scale = 1,
                            StartDate = new DateTime(2022, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ContractId = 2,
                            EmployeeId = 2,
                            FunctionId = 2,
                            MinimalHours = 12,
                            Scale = 2,
                            StartDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 2,
                            Name = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = 1,
                            Name = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = 0,
                            Name = 1
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Bsn")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BranchId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            BirthDate = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            Bsn = 123456789,
                            City = "Eindhoven",
                            Country = "Nederland",
                            FirstName = "Systeem",
                            HouseNumber = "12A",
                            Iban = "NL20INGB0001234567",
                            LastName = "Beheerder",
                            Period = 1,
                            State = "Noord-Brabant",
                            StreetName = "Bloemenlaantje",
                            TagId = 1,
                            ZipCode = "1234GG"
                        },
                        new
                        {
                            EmployeeId = 2,
                            BirthDate = new DateTime(1999, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            Bsn = 90747843,
                            City = "Somewhere",
                            Country = "Jaman",
                            FirstName = "Job",
                            HouseNumber = "25",
                            Iban = "NL20INGB0007654321",
                            LastName = "Koeveringe",
                            MiddleName = "van",
                            Period = 5,
                            State = "Nogsteedsniks",
                            StreetName = "WEetikNogSteedsNietStraat",
                            TagId = 2,
                            ZipCode = "5463HD"
                        },
                        new
                        {
                            EmployeeId = 3,
                            BirthDate = new DateTime(1997, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            Bsn = 90747843,
                            City = "Pijndorp",
                            Country = "Nederland",
                            FirstName = "Laser",
                            HouseNumber = "12",
                            Iban = "NL20INGB1231231233",
                            LastName = "Yesil",
                            Period = 2,
                            State = "Noord-Brabant",
                            StreetName = "Seamastraart",
                            TagId = 3,
                            ZipCode = "2342HD"
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.EmployeeHasDepartments", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("EmployeeHasDepartments");

                    b.HasData(
                        new
                        {
                            EmployeeId = 3,
                            DepartmentId = 3
                        },
                        new
                        {
                            EmployeeId = 3,
                            DepartmentId = 2
                        },
                        new
                        {
                            EmployeeId = 2,
                            DepartmentId = 3
                        },
                        new
                        {
                            EmployeeId = 2,
                            DepartmentId = 2
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Forecast", b =>
                {
                    b.Property<int>("ForecastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AmountOfCashiers")
                        .HasColumnType("int");

                    b.Property<int>("AmountOfCustomers")
                        .HasColumnType("int");

                    b.Property<int?>("AmountOfFresh")
                        .HasColumnType("int");

                    b.Property<int?>("AmountOfStockClerks")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RollContainers")
                        .HasColumnType("int");

                    b.HasKey("ForecastId");

                    b.HasIndex("BranchId");

                    b.ToTable("Forecasts");

                    b.HasData(
                        new
                        {
                            ForecastId = 1,
                            AmountOfCashiers = 10,
                            AmountOfCustomers = 200,
                            AmountOfFresh = 10,
                            AmountOfStockClerks = 10,
                            BranchId = 1,
                            Date = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Het wordt een drukke dag!!",
                            RollContainers = 21
                        },
                        new
                        {
                            ForecastId = 2,
                            AmountOfCashiers = 20,
                            AmountOfCustomers = 273,
                            AmountOfFresh = 5,
                            AmountOfStockClerks = 10,
                            BranchId = 1,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Het wordt nog drukker jongens. Harder werken jullie!",
                            RollContainers = 32
                        },
                        new
                        {
                            ForecastId = 3,
                            AmountOfCashiers = 10,
                            AmountOfCustomers = 163,
                            AmountOfFresh = 10,
                            AmountOfStockClerks = 30,
                            BranchId = 1,
                            Date = new DateTime(2022, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Nou ga maar lekker in je eentje werken, want het wordt rustig",
                            RollContainers = 11
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Function", b =>
                {
                    b.Property<int>("FunctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FunctionId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            FunctionId = 1,
                            DepartmentId = 3,
                            Name = "Afdelingshoofd"
                        },
                        new
                        {
                            FunctionId = 2,
                            DepartmentId = 3,
                            Name = "Slager"
                        },
                        new
                        {
                            FunctionId = 3,
                            DepartmentId = 2,
                            Name = "Vakkenvuller"
                        },
                        new
                        {
                            FunctionId = 4,
                            DepartmentId = 3,
                            Name = "Vers Medewerker"
                        },
                        new
                        {
                            FunctionId = 5,
                            DepartmentId = 1,
                            Name = "Kassa Medewerker"
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.OpeningDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("OpeningDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 1,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 2,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 3,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 1,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 4,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            BranchId = 1,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 5,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            BranchId = 1,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 6,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            BranchId = 1,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 0,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            BranchId = 2,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 1,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            BranchId = 2,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 2,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            BranchId = 2,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 3,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            BranchId = 2,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 4,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            BranchId = 2,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 5,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            BranchId = 2,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 6,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            BranchId = 2,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 0,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            BranchId = 3,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 1,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            BranchId = 3,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 2,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            BranchId = 3,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 3,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            BranchId = 3,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 4,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            BranchId = 3,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 5,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            BranchId = 3,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 6,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            BranchId = 3,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayOfWeek = 0,
                            OpenTime = new TimeSpan(0, 7, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("CorrectClocking")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RegistrationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Registrations");

                    b.HasData(
                        new
                        {
                            RegistrationId = 1,
                            CorrectClocking = true,
                            EmployeeId = 3,
                            EndDate = new DateTime(2022, 1, 12, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2022, 1, 12, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RegistrationId = 2,
                            CorrectClocking = true,
                            EmployeeId = 3,
                            EndDate = new DateTime(2022, 1, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2022, 1, 11, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RegistrationId = 3,
                            CorrectClocking = false,
                            EmployeeId = 3,
                            EndDate = new DateTime(2022, 1, 10, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2022, 1, 10, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Remuneration", b =>
                {
                    b.Property<int>("RenumerationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Hours")
                        .HasColumnType("time");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<double>("SurtaxRate")
                        .HasColumnType("float");

                    b.HasKey("RenumerationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Remunerations");

                    b.HasData(
                        new
                        {
                            RenumerationId = 1,
                            Date = new DateTime(2022, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            Hours = new TimeSpan(0, 8, 0, 0, 0),
                            IsApproved = false,
                            SurtaxRate = 50.0
                        },
                        new
                        {
                            RenumerationId = 2,
                            Date = new DateTime(2022, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            Hours = new TimeSpan(0, 5, 0, 0, 0),
                            IsApproved = false,
                            SurtaxRate = 50.0
                        },
                        new
                        {
                            RenumerationId = 3,
                            Date = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            Hours = new TimeSpan(0, 6, 0, 0, 0),
                            IsApproved = false,
                            SurtaxRate = 50.0
                        },
                        new
                        {
                            RenumerationId = 4,
                            Date = new DateTime(2022, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            Hours = new TimeSpan(0, 10, 0, 0, 0),
                            IsApproved = true,
                            SurtaxRate = 50.0
                        },
                        new
                        {
                            RenumerationId = 5,
                            Date = new DateTime(2022, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            Hours = new TimeSpan(0, 10, 0, 0, 0),
                            IsApproved = false,
                            SurtaxRate = 50.0
                        },
                        new
                        {
                            RenumerationId = 6,
                            Date = new DateTime(2022, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            Hours = new TimeSpan(0, 10, 0, 0, 0),
                            IsApproved = false,
                            SurtaxRate = 50.0
                        },
                        new
                        {
                            RenumerationId = 7,
                            Date = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            Hours = new TimeSpan(0, 11, 34, 0, 0),
                            IsApproved = false,
                            SurtaxRate = 38.100000000000001
                        },
                        new
                        {
                            RenumerationId = 8,
                            Date = new DateTime(2022, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            Hours = new TimeSpan(0, 3, 59, 0, 0),
                            IsApproved = false,
                            SurtaxRate = 13.9
                        },
                        new
                        {
                            RenumerationId = 9,
                            Date = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            Hours = new TimeSpan(0, 9, 6, 0, 0),
                            IsApproved = false,
                            SurtaxRate = 48.299999999999997
                        },
                        new
                        {
                            RenumerationId = 10,
                            Date = new DateTime(2022, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            Hours = new TimeSpan(0, 10, 0, 0, 0),
                            IsApproved = false,
                            SurtaxRate = 9.1999999999999993
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Finalised")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            ScheduleId = 1,
                            DepartmentId = 3,
                            EmployeeId = 3,
                            EndDate = new DateTime(2022, 1, 8, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Finalised = true,
                            StartDate = new DateTime(2022, 1, 8, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ScheduleId = 2,
                            DepartmentId = 2,
                            EmployeeId = 3,
                            EndDate = new DateTime(2022, 1, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Finalised = false,
                            StartDate = new DateTime(2022, 1, 9, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ScheduleId = 3,
                            DepartmentId = 3,
                            EmployeeId = 2,
                            EndDate = new DateTime(2022, 1, 8, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Finalised = true,
                            StartDate = new DateTime(2022, 1, 8, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ScheduleId = 4,
                            DepartmentId = 2,
                            EmployeeId = 2,
                            EndDate = new DateTime(2022, 1, 9, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Finalised = false,
                            StartDate = new DateTime(2022, 1, 9, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Standard", b =>
                {
                    b.Property<int>("StandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Norm")
                        .HasColumnType("int");

                    b.HasKey("StandardId");

                    b.HasIndex("BranchId");

                    b.ToTable("Standards");

                    b.HasData(
                        new
                        {
                            StandardId = 1,
                            Activity = 0,
                            BranchId = 1,
                            Description = "Het aantal minuten wat nodig is om een coli uit te laden.",
                            Norm = 5
                        },
                        new
                        {
                            StandardId = 2,
                            Activity = 1,
                            BranchId = 1,
                            Description = "Het aantal minuten wat nodig is om een coli bij te vullen bij de vakken.",
                            Norm = 30
                        },
                        new
                        {
                            StandardId = 3,
                            Activity = 2,
                            BranchId = 1,
                            Description = "Het aantal klanten wat één Kassière af kan handelen per uur aan de kassa.",
                            Norm = 30
                        },
                        new
                        {
                            StandardId = 4,
                            Activity = 3,
                            BranchId = 1,
                            Description = "Het aantal klanten wat een medewerker af kan handelen per uur bij de verse afdeling.",
                            Norm = 100
                        },
                        new
                        {
                            StandardId = 5,
                            Activity = 4,
                            BranchId = 1,
                            Description = "De tijd die nodig is in secondes om een meter aan spiegels schoon te poetsen.",
                            Norm = 30
                        },
                        new
                        {
                            StandardId = 6,
                            Activity = 0,
                            BranchId = 2,
                            Description = "Het aantal minuten wat nodig is om een coli uit te laden.",
                            Norm = 5
                        },
                        new
                        {
                            StandardId = 7,
                            Activity = 1,
                            BranchId = 2,
                            Description = "Het aantal minuten wat nodig is om een coli bij te vullen bij de vakken.",
                            Norm = 30
                        },
                        new
                        {
                            StandardId = 8,
                            Activity = 2,
                            BranchId = 2,
                            Description = "Het aantal klanten wat één Kassière af kan handelen per uur aan de kassa.",
                            Norm = 30
                        },
                        new
                        {
                            StandardId = 9,
                            Activity = 3,
                            BranchId = 2,
                            Description = "Het aantal klanten wat een medewerker af kan handelen per uur bij de verse afdeling.",
                            Norm = 100
                        },
                        new
                        {
                            StandardId = 10,
                            Activity = 4,
                            BranchId = 2,
                            Description = "De tijd die nodig is in secondes om een meter aan spiegels schoon te poetsen.",
                            Norm = 30
                        },
                        new
                        {
                            StandardId = 11,
                            Activity = 0,
                            BranchId = 3,
                            Description = "Het aantal minuten wat nodig is om een coli uit te laden.",
                            Norm = 5
                        },
                        new
                        {
                            StandardId = 12,
                            Activity = 1,
                            BranchId = 3,
                            Description = "Het aantal minuten wat nodig is om een coli bij te vullen bij de vakken.",
                            Norm = 30
                        },
                        new
                        {
                            StandardId = 13,
                            Activity = 2,
                            BranchId = 3,
                            Description = "Het aantal klanten wat één Kassière af kan handelen per uur aan de kassa.",
                            Norm = 30
                        },
                        new
                        {
                            StandardId = 14,
                            Activity = 3,
                            BranchId = 3,
                            Description = "Het aantal klanten wat een medewerker af kan handelen per uur bij de verse afdeling.",
                            Norm = 100
                        },
                        new
                        {
                            StandardId = 15,
                            Activity = 4,
                            BranchId = 3,
                            Description = "De tijd die nodig is in secondes om een meter aan spiegels schoon te poetsen.",
                            Norm = 30
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Availability", b =>
                {
                    b.HasOne("Bumbo.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Contract", b =>
                {
                    b.HasOne("Bumbo.Domain.Models.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbo.Domain.Models.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Employee", b =>
                {
                    b.HasOne("Bumbo.Domain.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.EmployeeHasDepartments", b =>
                {
                    b.HasOne("Bumbo.Domain.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbo.Domain.Models.Employee", "Employee")
                        .WithMany("Departments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Forecast", b =>
                {
                    b.HasOne("Bumbo.Domain.Models.Branch", "Branch")
                        .WithMany("Forecasts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Function", b =>
                {
                    b.HasOne("Bumbo.Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.OpeningDay", b =>
                {
                    b.HasOne("Bumbo.Domain.Models.Branch", "Branch")
                        .WithMany("OpeningDays")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Registration", b =>
                {
                    b.HasOne("Bumbo.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Remuneration", b =>
                {
                    b.HasOne("Bumbo.Domain.Models.Employee", "Employee")
                        .WithMany("Remunerations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Schedule", b =>
                {
                    b.HasOne("Bumbo.Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bumbo.Domain.Models.Employee", "Employee")
                        .WithMany("Schedules")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Standard", b =>
                {
                    b.HasOne("Bumbo.Domain.Models.Branch", "Branch")
                        .WithMany("Standards")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Branch", b =>
                {
                    b.Navigation("Forecasts");

                    b.Navigation("OpeningDays");

                    b.Navigation("Standards");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Bumbo.Domain.Models.Employee", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Departments");

                    b.Navigation("Remunerations");

                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
